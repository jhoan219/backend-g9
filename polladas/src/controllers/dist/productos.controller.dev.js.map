{"version":3,"sources":["productos.controller.js"],"names":["crearProducto","req","res","data","body","Prisma","producto","create","nuevoProducto","console","log","status","json","message","content","error","listarProductos","findMany","productos","traerProductoPorId","id","params","findUnique","where","Number","actualizarProducto","findProduct","update","nombre","cantidad","precio","disponibilidad","select","eliminarProducto"],"mappings":"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","sourcesContent":["import { Prisma } from \"../prisma.js\";\r\n\r\nexport const crearProducto = async (req, res) => {\r\n  const data = req.body; // {nombre: '...', precio: ..., cantidad: ... , disponibilidad: ...}\r\n  try {\r\n    // Todas las operaciones que se realiza en Prisma son operaciones asincronas\r\n    const nuevoProducto = await Prisma.producto.create({\r\n      data, // data: data\r\n      // {\r\n      //   nombre: data.nombre,\r\n      //   precio: data.precio,\r\n      //   cantidad: data.cantidad,\r\n      //   disponibilidad: data.disponibilidad,\r\n      // },\r\n    });\r\n\r\n    console.log(\"hola\");\r\n\r\n    res.status(201).json({\r\n      message: \"producto creado exitosamente\",\r\n      content: nuevoProducto,\r\n    });\r\n  } catch (error) {\r\n    res.status(400).json({\r\n      message: \"Error al crear el producto\",\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const listarProductos = async (req, res) => {\r\n  try {\r\n    const productos = await Prisma.producto.findMany();\r\n    return res.status(200).json({\r\n      message: \"Productos encontrados\",\r\n      content: productos,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({\r\n      message: \"Error en el servidor\",\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const traerProductoPorId = async (req, res) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const producto = await Prisma.producto.findUnique({\r\n      where: {\r\n        id: Number(id),\r\n      },\r\n    });\r\n    if (!producto) {\r\n      return res.status(404).json({\r\n        message: \"Producto no encontrado\",\r\n      });\r\n    }\r\n    return res.status(200).json({\r\n      message: \"Producto encontrado\",\r\n      content: producto,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({\r\n      message: \"Error en el servidor\",\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const actualizarProducto = async (req, res) => {\r\n  const { id } = req.params;\r\n  const data = req.body;\r\n  try {\r\n    const findProduct = await Prisma.producto.findUnique({\r\n      where: {\r\n        id: Number(id),\r\n      },\r\n    });\r\n    if (!findProduct) {\r\n      return res.status(404).json({\r\n        message: \"Producto no encontrado\",\r\n      });\r\n    }\r\n    const producto = await Prisma.producto.update({\r\n      where: {\r\n        id: Number(id),\r\n      },\r\n      data: {\r\n        nombre: data.nombre,\r\n        cantidad: data.cantidad,\r\n        precio: data.precio,\r\n        disponibilidad: data.disponibilidad,\r\n      },\r\n      select: {\r\n        id: true,\r\n        nombre: true,\r\n        cantidad: true,\r\n        precio: true,\r\n      },\r\n    });\r\n\r\n    return res.status(201).json({\r\n      message: \"Producto actualizado\",\r\n      content: producto,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({\r\n      message: \"Error en el servidor\",\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const eliminarProducto = async (req, res) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const findProduct = await Prisma.producto.findUnique({\r\n      where: {\r\n        id: Number(id),\r\n      },\r\n    });\r\n    if (!findProduct) {\r\n      return res.status(404).json({\r\n        message: \"Producto no encontrado\",\r\n      });\r\n    }\r\n\r\n    const producto = await Prisma.producto.update({\r\n      where: {\r\n        id: Number(id),\r\n      },\r\n      data: {\r\n        disponibilidad: false,\r\n      },\r\n      select: {\r\n        id: true,\r\n        nombre: true,\r\n        disponibilidad: true,\r\n      },\r\n    });\r\n    return res.status(200).json({\r\n      message: \"Producto eliminado\",\r\n      content: producto,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({\r\n      message: \"Error en el servidor\",\r\n      error: error.message,\r\n    });\r\n  }\r\n};"],"file":"productos.controller.dev.js"}
{"version":3,"sources":["agendaController.js"],"names":["crearAgenda","req","res","data","body","usuarioId","user","_id","Agenda","create","usuario","agendaCreada","Usuario","updateOne","agendas","status","json","message","content","listarAgenda","aggregate","$match","lookup","from","localField","foreignField","as","console","log"],"mappings":";;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;AAEO,SAAeA,WAAf,CAA2BC,GAA3B,EAAgCC,GAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,UAAAA,IADD,GACQF,GAAG,CAACG,IADZ;AAECC,UAAAA,SAFD,GAEaJ,GAAG,CAACK,IAAJ,CAASC,GAFtB;AAAA;AAAA;AAAA,0CAIwBC,oBAAOC,MAAP,mBAAmBN,IAAnB;AAAyBO,YAAAA,OAAO,EAAEL;AAAlC,aAJxB;;AAAA;AAIGM,UAAAA,YAJH;AAAA;AAAA,0CAOGC,sBAAQC,SAAR,CACJ;AAAEN,YAAAA,GAAG,EAAEF;AAAP,WADI,EAEJ;AAAES,YAAAA,OAAO,+BAAMb,GAAG,CAACK,IAAJ,CAASQ,OAAf,IAAwBH,YAAY,CAACJ,GAArC;AAAT,WAFI,CAPH;;AAAA;AAYHL,UAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,YAAAA,OAAO,EAAE,4BADU;AAEnBC,YAAAA,OAAO,EAAEP;AAFU,WAArB;AAZG;AAAA;;AAAA;AAAA;AAAA;AAiBH;AACAT,UAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,YAAAA,OAAO,EAAE,0BADU;AAEnBC,YAAAA,OAAO,EAAE,YAAMD;AAFI,WAArB;;AAlBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyBA,SAAeE,YAAf,CAA4BlB,GAA5B,EAAiCC,GAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACCG,UAAAA,SADD,GACaJ,GAAG,CAACK,IAAJ,CAASC,GADtB,EAGL;;AAHK;AAAA,0CAIiBC,oBAAOY,SAAP,CAAiB,CACrC;AACEC,YAAAA,MAAM,EAAE;AAAEX,cAAAA,OAAO,EAAEL;AAAX;AADV,WADqC,CAAjB,EAInBiB,MAJmB,CAIZ;AACRC,YAAAA,IAAI,EAAE,UADE;AACU;AAClBC,YAAAA,UAAU,EAAE,SAFJ;AAEe;AACvBC,YAAAA,YAAY,EAAE,KAHN;AAGa;AACrBC,YAAAA,EAAE,EAAE,aAJI,CAIW;;AAJX,WAJY,CAJjB;;AAAA;AAICZ,UAAAA,OAJD;AAeLa,UAAAA,OAAO,CAACC,GAAR,CAAYd,OAAZ;AACAZ,UAAAA,GAAG,CAACc,IAAJ,CAAS;AACPE,YAAAA,OAAO,EAAEJ;AADF,WAAT;;AAhBK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { Agenda } from \"../models/agendaModel.js\";\r\nimport { Usuario } from \"../models/usuarioModel.js\";\r\n\r\nexport async function crearAgenda(req, res) {\r\n  const data = req.body;\r\n  const usuarioId = req.user._id;\r\n  try {\r\n    const agendaCreada = await Agenda.create({ ...data, usuario: usuarioId });\r\n\r\n    // ahora tenemos que agregar ese id de la agenda a las agendas del usuario\r\n    await Usuario.updateOne(\r\n      { _id: usuarioId },\r\n      { agendas: [...req.user.agendas, agendaCreada._id] }\r\n    );\r\n\r\n    res.status(201).json({\r\n      message: \"Agenda creada exitosamente\",\r\n      content: agendaCreada,\r\n    });\r\n  } catch (error) {\r\n    // aca ingresara si hay algun error ya sea por la validacion o por que el usuario no existe\r\n    res.status(400).json({\r\n      message: \"Error al crear la agenda\",\r\n      content: error.message,\r\n    });\r\n  }\r\n}\r\n\r\nexport async function listarAgenda(req, res) {\r\n  const usuarioId = req.user._id;\r\n\r\n  // left outer join utilizando lo que vendria a hacer una clausula condicional cuando concuerde que solamente muestre las agendas de ese usuario\r\n  const agendas = await Agenda.aggregate([\r\n    {\r\n      $match: { usuario: usuarioId },\r\n    },\r\n  ]).lookup({\r\n    from: \"usuarios\", // aca va el nombre de la coleccion, NO EL NOMBRE DEL MODELO\r\n    localField: \"usuario\", // la columna de la tabla agenda que usaremos\r\n    foreignField: \"_id\", // la columna de la tabla usuarios que usaremos para la relacion\r\n    as: \"propietario\", // en que columna se mostrara este join\r\n  });\r\n\r\n  console.log(agendas);\r\n  res.json({\r\n    content: agendas,\r\n  });\r\n}"],"file":"agendaController.dev.js"}
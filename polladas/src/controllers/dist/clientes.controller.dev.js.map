{"version":3,"sources":["clientes.controller.js"],"names":["crearCliente","req","res","data","body","Prisma","cliente","create","status","json","message","content","error","listarClientes","findMany","clientes","traerClientePorId","id","params","findUnique","where","Number","actualizarCliente","findCliente","update","eliminarCliente"],"mappings":"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","sourcesContent":["import { Prisma } from \"../prisma.js\";\r\n\r\nexport const crearCliente = async (req, res) => {\r\n  const data = req.body;\r\n  try {\r\n    const cliente = await Prisma.cliente.create({\r\n      data,\r\n    });\r\n    return res.status(201).json({\r\n      message: \"Cliente creado\",\r\n      content: cliente,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({\r\n      message: \"Error en el servidor\",\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const listarClientes = async (req, res) => {\r\n  try {\r\n    const clientes = await Prisma.cliente.findMany();\r\n    return res.status(200).json({\r\n      message: \"Lista clientes\",\r\n      content: clientes,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({\r\n      message: \"Erro inesperado\",\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const traerClientePorId = async (req, res) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const cliente = await Prisma.cliente.findUnique({\r\n      where: {\r\n        id: Number(id),\r\n      },\r\n    });\r\n    if (!cliente) {\r\n      return res.status(404).json({\r\n        message: \"Cliente no encontrado\",\r\n      });\r\n    }\r\n\r\n    return res.status(200).json({\r\n      message: \"Cliente encontrado\",\r\n      content: cliente,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({\r\n      message: \"Erro inesperado\",\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const actualizarCliente = async () => {\r\n  const { id } = req.params;\r\n  const data = req.body;\r\n  try {\r\n    const findCliente = await Prisma.cliente.findUnique({\r\n      where: {\r\n        id: Number(id),\r\n      },\r\n    });\r\n    if (!findCliente) {\r\n      return res.status(404).json({\r\n        message: \"Cliente no encontrado\",\r\n      });\r\n    }\r\n\r\n    const cliente = await Prisma.cliente.update({\r\n      data,\r\n    });\r\n    return res.status(201).json({\r\n      message: \"Cliente actualizado\",\r\n      content: cliente,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({\r\n      message: \"Erro inesperado\",\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const eliminarCliente = async (req, res) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const findCliente = await Prisma.cliente.findUnique({\r\n      where: {\r\n        id: Number(id),\r\n      },\r\n    });\r\n    if (!findCliente) {\r\n      return res.status(404).json({\r\n        message: \"Cliente no encontrado\",\r\n      });\r\n    }\r\n    const cliente = await Prisma.cliente.delete({\r\n      where: {\r\n        id: Number(id),\r\n      },\r\n    });\r\n\r\n    return res.status(200).json({\r\n      message: \"Cliente eliminado\",\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({\r\n      message: \"Erro inesperado\",\r\n      error: error.message,\r\n    });\r\n  }\r\n};"],"file":"clientes.controller.dev.js"}
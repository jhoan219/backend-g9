{"version":3,"sources":["agendaController.js"],"names":["_agendaModel","require","_usuarioModel","crearAgenda","req","res","data","usuarioId","agendaCreada","regeneratorRuntime","async","_context","prev","next","body","user","_id","awrap","Agenda","create","_objectSpread","usuario","sent","Usuario","updateOne","agendas","concat","_toConsumableArray","status","json","message","content","t0","stop","listarAgenda","_context2","aggregate","$match","lookup","localField","foreignField","as","console","log"],"mappings":"sIAAA,IAAAA,aAAAC,QAAA,4BACAC,cAAAD,QAAA,ysCAEO,SAAeE,YAAYC,EAAKC,GAAhC,IAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OACCP,EAAOF,EAAIU,KACXP,EAAYH,EAAIW,KAAKC,IAFtBL,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAQ,MAIwBC,aAAAA,OAAOC,OAAPC,cAAA,GAAmBd,EAAnB,CAAyBe,QAASd,MAJ1D,KAAA,EAAA,OAIGC,EAJHG,EAAAW,KAAAX,EAAAE,KAAA,EAAAJ,mBAAAQ,MAFPM,cAAAA,QAAAC,UAUM,CAAER,IAAKT,GACP,CAAEkB,QAAO,GAAAC,OAAAC,mBAAMvB,EAAIW,KAAKU,SAAf,CAAwBjB,EAAaQ,SAT7C,KAAA,EAYHX,EAAIuB,OAAO,KAAKC,KAAK,CACnBC,QAAS,6BACTC,QAASvB,IAdRG,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAqB,GAAArB,EAAA,MAAA,GAkBHN,EAAIuB,OAAO,KAAKC,KAAK,CACnBC,QAAS,2BACTC,QAASpB,EAAAqB,GAAMF,UApBd,KAAA,GAAA,IAAA,MAAA,OAAAnB,EAAAsB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAAA,SAAAC,aAAA9B,EAAAC,GAAA,IAAAE,EAAAkB,EAAA,OAAAhB,mBAAAC,MAAA,SAAAyB,GAAA,OAAA,OAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,KAAA,EAAA,OAAAN,EAAAH,EAAAW,KAAAC,IAAAmB,EAAAtB,KAAA,EAAAJ,mBAAAQ,MACYH,aAAAA,OADZsB,UAAA,CAEC7B,CAFD8B,OAAA,CAAAhB,QAAAd,MAAA+B,OAAA,CAIiDjB,KAAAA,WAAzBkB,WAJxB,UAoCHC,aAAc,MApCXC,GAAA,iBAAA,KAAA,EACCnC,EADD6B,EAAAb,KAAAoB,QAAAC,IAAAlB,GAQCT,EAAAA,KAAAA,CAAFe,QACAN,IATC,KAAA,EAAA,IAAA,MAAA,OAAAU,EAAAF","file":"agendaController.min.js","sourcesContent":["import { Agenda } from \"../models/agendaModel.js\";\r\nimport { Usuario } from \"../models/usuarioModel.js\";\r\n\r\nexport async function crearAgenda(req, res) {\r\n  const data = req.body;\r\n  const usuarioId = req.user._id;\r\n  try {\r\n    const agendaCreada = await Agenda.create({ ...data, usuario: usuarioId });\r\n\r\n    // ahora tenemos que agregar ese id de la agenda a las agendas del usuario\r\n    await Usuario.updateOne(\r\n      { _id: usuarioId },\r\n      { agendas: [...req.user.agendas, agendaCreada._id] }\r\n    );\r\n\r\n    res.status(201).json({\r\n      message: \"Agenda creada exitosamente\",\r\n      content: agendaCreada,\r\n    });\r\n  } catch (error) {\r\n    // aca ingresara si hay algun error ya sea por la validacion o por que el usuario no existe\r\n    res.status(400).json({\r\n      message: \"Error al crear la agenda\",\r\n      content: error.message,\r\n    });\r\n  }\r\n}\r\n\r\nexport async function listarAgenda(req, res) {\r\n  const usuarioId = req.user._id;\r\n\r\n  // left outer join utilizando lo que vendria a hacer una clausula condicional cuando concuerde que solamente muestre las agendas de ese usuario\r\n  const agendas = await Agenda.aggregate([\r\n    {\r\n      $match: { usuario: usuarioId },\r\n    },\r\n  ]).lookup({\r\n    from: \"usuarios\", // aca va el nombre de la coleccion, NO EL NOMBRE DEL MODELO\r\n    localField: \"usuario\", // la columna de la tabla agenda que usaremos\r\n    foreignField: \"_id\", // la columna de la tabla usuarios que usaremos para la relacion\r\n    as: \"propietario\", // en que columna se mostrara este join\r\n  });\r\n\r\n  console.log(agendas);\r\n  res.json({\r\n    content: agendas,\r\n  });\r\n}"]}
{"version":3,"sources":["clientes.controller.js"],"names":["_prisma","require","crearCliente","req","res","data","cliente","regeneratorRuntime","async","_context","prev","next","body","awrap","Prisma","create","sent","abrupt","status","json","content","t0","message","stop","listarClientes","clientes","_context2","findMany","error","traerClientePorId","id","_context3","params","findUnique","where","Number","update","_context4","eliminarCliente","_context5"],"mappings":"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","file":"clientes.controller.min.js","sourcesContent":["import { Prisma } from \"../prisma.js\";\r\n\r\nexport const crearCliente = async (req, res) => {\r\n  const data = req.body;\r\n  try {\r\n    const cliente = await Prisma.cliente.create({\r\n      data,\r\n    });\r\n    return res.status(201).json({\r\n      message: \"Cliente creado\",\r\n      content: cliente,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({\r\n      message: \"Error en el servidor\",\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const listarClientes = async (req, res) => {\r\n  try {\r\n    const clientes = await Prisma.cliente.findMany();\r\n    return res.status(200).json({\r\n      message: \"Lista clientes\",\r\n      content: clientes,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({\r\n      message: \"Erro inesperado\",\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const traerClientePorId = async (req, res) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const cliente = await Prisma.cliente.findUnique({\r\n      where: {\r\n        id: Number(id),\r\n      },\r\n    });\r\n    if (!cliente) {\r\n      return res.status(404).json({\r\n        message: \"Cliente no encontrado\",\r\n      });\r\n    }\r\n\r\n    return res.status(200).json({\r\n      message: \"Cliente encontrado\",\r\n      content: cliente,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({\r\n      message: \"Erro inesperado\",\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const actualizarCliente = async () => {\r\n  const { id } = req.params;\r\n  const data = req.body;\r\n  try {\r\n    const findCliente = await Prisma.cliente.findUnique({\r\n      where: {\r\n        id: Number(id),\r\n      },\r\n    });\r\n    if (!findCliente) {\r\n      return res.status(404).json({\r\n        message: \"Cliente no encontrado\",\r\n      });\r\n    }\r\n\r\n    const cliente = await Prisma.cliente.update({\r\n      data,\r\n    });\r\n    return res.status(201).json({\r\n      message: \"Cliente actualizado\",\r\n      content: cliente,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({\r\n      message: \"Erro inesperado\",\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const eliminarCliente = async (req, res) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const findCliente = await Prisma.cliente.findUnique({\r\n      where: {\r\n        id: Number(id),\r\n      },\r\n    });\r\n    if (!findCliente) {\r\n      return res.status(404).json({\r\n        message: \"Cliente no encontrado\",\r\n      });\r\n    }\r\n    const cliente = await Prisma.cliente.delete({\r\n      where: {\r\n        id: Number(id),\r\n      },\r\n    });\r\n\r\n    return res.status(200).json({\r\n      message: \"Cliente eliminado\",\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({\r\n      message: \"Erro inesperado\",\r\n      error: error.message,\r\n    });\r\n  }\r\n};"]}
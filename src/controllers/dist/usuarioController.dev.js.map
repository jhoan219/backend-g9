{"version":3,"sources":["usuarioController.js"],"names":["registro","req","res","data","body","console","log","password","bcryptjs","hashSync","Usuario","create","nuevoUsuario","status","json","message","content","login","findOne","email","usuarioEncontrado","compareSync","payload","jti","_id","nombre","token","jwt","sign","process","env","JWT_SECRET","expiresIn","perfil","user","aggregate","lookup","from","localField","foreignField","as","match","project"],"mappings":"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","sourcesContent":["import { Usuario } from \"../models/usuarioModel.js\";\r\nimport bcryptjs from \"bcryptjs\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\nexport async function registro(req, res) {\r\n  const data = req.body;\r\n  console.log(data);\r\n\r\n  try {\r\n    // generamos el hash de la contraseña del usuario\r\n    const password = bcryptjs.hashSync(data.password, 10);\r\n\r\n    const nuevoUsuario = await Usuario.create({ ...data, password });\r\n\r\n    res.status(201).json({\r\n      message: \"Usuario creado exitosamente\",\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({\r\n      message: \"Error al crear el usuario\",\r\n      content: error.message,\r\n    });\r\n  }\r\n}\r\n\r\nexport async function login(req, res) {\r\n  const data = req.body; // {email: '...', password: '...'}\r\n  const usuarioEncontrado = await Usuario.findOne({ email: data.email });\r\n\r\n  if (!usuarioEncontrado) {\r\n    return res.status(404).json({\r\n      message: \"El usuario no existe\",\r\n    });\r\n  }\r\n\r\n  if (bcryptjs.compareSync(data.password, usuarioEncontrado.password)) {\r\n    // es la contraseña del usuario\r\n    const payload = {\r\n      jti: usuarioEncontrado._id,\r\n      nombre: usuarioEncontrado.nombre,\r\n    };\r\n\r\n    const token = jwt.sign(payload, process.env.JWT_SECRET, {\r\n      expiresIn: \"1h\",\r\n    });\r\n\r\n    res.json({\r\n      message: \"Bienvenido\",\r\n      content: token,\r\n    });\r\n  } else {\r\n    res.json({\r\n      message: \"Error al ingresar, la contraseña no es valida\",\r\n    });\r\n  }\r\n}\r\n\r\nexport async function perfil(req, res) {\r\n  console.log(req.user);\r\n  // seleccionamos solamente el nombre del usuario indicando las columnas separadas por espacio y la que no se le coloca un signo negativo (-)\r\n\r\n  // const usuarioEncontrado = await Usuario.findById(req.user._id).select(\r\n  //   \"nombre email direcciones\" // -_id\"\r\n  // );\r\n\r\n  // Estamos utilizando una funcion de agregacion para seleccionar el usuario con sus agendas y ademas evitar mostrar el password pero solamente el usuario cuyo id sea el de req.user\r\n  const usuarioEncontrado = await Usuario.aggregate()\r\n    .lookup({\r\n      from: \"agendas\", // nombre de la tabla de donde voy a hacer el join\r\n      localField: \"agendas\", // nombre de la columna que usare en mi tabla usuario\r\n      foreignField: \"_id\", // nombre de la columna que usare en la tabla agendas\r\n      as: \"agendas\", // alias\r\n    })\r\n    .match({ _id: req.user._id })\r\n    .project(\"-password\");\r\n\r\n  res.json({\r\n    content: usuarioEncontrado,\r\n  });\r\n}"],"file":"usuarioController.dev.js"}
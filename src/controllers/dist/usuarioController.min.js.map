{"version":3,"sources":["usuarioController.js"],"names":["_usuarioModel","require","_bcryptjs","_interopRequireDefault","_jsonwebtoken","registro","req","res","data","password","regeneratorRuntime","async","_context","prev","next","body","console","log","bcryptjs","hashSync","awrap","Usuario","create","_objectSpread","sent","status","json","message","t0","content","stop","login","usuarioEncontrado","payload","token","_context2","findOne","email","abrupt","compareSync","jti","_id","nombre","sign","process","env","JWT_SECRET","expiresIn","perfil","_context3","user","aggregate","lookup","from","foreignField","as","project"],"mappings":"wIAAA,IAAAA,cAAAC,QAAA,6BACAC,UAAAC,uBAAAF,QAAA,aACAG,cAAAD,uBAAAF,QAAA,ozBAEO,SAAeI,SAASC,EAAKC,GAA7B,IAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OACCN,EAAOF,EAAIS,KACjBC,QAAQC,IAAIT,GAFPI,EAAAC,KAAA,EAMGJ,EAAWS,UAAAA,QAASC,SAASX,EAAKC,SAAU,IAN/CG,EAAAE,KAAA,EAAAJ,mBAAAU,MAQwBC,cAAAA,QAAQC,OAARC,cAAA,GAAoBf,EAApB,CAA0BC,SAAAA,MARlD,KAAA,EAAAG,EAAAY,KAUHjB,EAAIkB,OAAO,KAAKC,KAAK,CACnBC,QAAS,gCAXRf,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAgB,GAAAhB,EAAA,MAAA,GAcHL,EAAIkB,OAAO,KAAKC,KAAK,CACnBC,QAAS,4BACTE,QAASjB,EAAAgB,GAAMD,UAhBd,KAAA,GAAA,IAAA,MAAA,OAAAf,EAAAkB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAAA,SAAAC,MAAAzB,EAAAC,GAAA,IAAAC,EAAAwB,EAAAC,EAAAC,EAAA,OAAAxB,mBAAAC,MAAA,SAAAwB,GAAA,OAAA,OAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,KAAA,EAAA,OAAAN,EAAAF,EAAAS,KAAAoB,EAAArB,KAAA,EAAAJ,mBAAAU,MAAAC,cAAAA,QAAAe,QAAA,CAAAC,MAAA7B,EAAA6B,SAAA,KAAA,EAAA,GAAAL,EAAAG,EAAAX,KAAA,CAAAW,EAAArB,KAAA,EAAA,MAAA,OAAAqB,EAAAG,OAAA,SAELtB,EAAAA,OAAYR,KAAZkB,KAAA,CAFKC,QAAA,0BAAA,KAAA,EAAAT,UAAAA,QAAAqB,YAAA/B,EAAAC,SAQwBY,EAAAA,WAAAY,EARxB,CAkCDO,IAAKR,EAAkBS,IAlCtBC,OAAAV,EAAAU,QAWDf,EAAAA,cAAAA,QAASgB,KAAAV,EAAAW,QAAAC,IAAAC,WAAA,CADUC,UAArB,OAgCAxC,EAAImB,KAAK,CA1CNC,QAAA,aAAAE,QAAAK,KAeDP,EAAAA,KAAAA,CACAE,QAAAA,kDAhBC,KAAA,EAAA,IAAA,MAAA,OAAAM,EAAAL,UAAA,SAAAkB,OAAA1C,EAAAC,GAAA,IAAAyB,EAAA,OAAAtB,mBAAAC,MAAA,SAAAsC,GAAA,OAAA,OAAAA,EAAApC,KAAAoC,EAAAnC,MAAA,KAAA,EAAA,OAAAE,QAAAC,IAAAX,EAAA4C,MAAAD,EAAAnC,KAAA,EAAAJ,mBAAAU,MAqBAC,cAAAA,QAAA8B,YAAAC,OAAA,CAAAC,KAAA,UACC7C,WAAOF,UA4CTgD,aAAc,MA7CbC,GAAA,YAE6ClB,MAAAA,CAAAA,IAAK/B,EAAEE,KAAK6B,MAAdmB,QAF3C,cArBA,KAAA,EAqBAxB,EArBAiB,EAAAzB,KAqBAjB,EAAAmB,KAAA,CAECM,QAAAA,IAvBD,KAAA,EAAA,IAAA,MAAA,OAAAiB,EAAAnB","file":"usuarioController.min.js","sourcesContent":["import { Usuario } from \"../models/usuarioModel.js\";\r\nimport bcryptjs from \"bcryptjs\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\nexport async function registro(req, res) {\r\n  const data = req.body;\r\n  console.log(data);\r\n\r\n  try {\r\n    // generamos el hash de la contraseña del usuario\r\n    const password = bcryptjs.hashSync(data.password, 10);\r\n\r\n    const nuevoUsuario = await Usuario.create({ ...data, password });\r\n\r\n    res.status(201).json({\r\n      message: \"Usuario creado exitosamente\",\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({\r\n      message: \"Error al crear el usuario\",\r\n      content: error.message,\r\n    });\r\n  }\r\n}\r\n\r\nexport async function login(req, res) {\r\n  const data = req.body; // {email: '...', password: '...'}\r\n  const usuarioEncontrado = await Usuario.findOne({ email: data.email });\r\n\r\n  if (!usuarioEncontrado) {\r\n    return res.status(404).json({\r\n      message: \"El usuario no existe\",\r\n    });\r\n  }\r\n\r\n  if (bcryptjs.compareSync(data.password, usuarioEncontrado.password)) {\r\n    // es la contraseña del usuario\r\n    const payload = {\r\n      jti: usuarioEncontrado._id,\r\n      nombre: usuarioEncontrado.nombre,\r\n    };\r\n\r\n    const token = jwt.sign(payload, process.env.JWT_SECRET, {\r\n      expiresIn: \"1h\",\r\n    });\r\n\r\n    res.json({\r\n      message: \"Bienvenido\",\r\n      content: token,\r\n    });\r\n  } else {\r\n    res.json({\r\n      message: \"Error al ingresar, la contraseña no es valida\",\r\n    });\r\n  }\r\n}\r\n\r\nexport async function perfil(req, res) {\r\n  console.log(req.user);\r\n  // seleccionamos solamente el nombre del usuario indicando las columnas separadas por espacio y la que no se le coloca un signo negativo (-)\r\n\r\n  // const usuarioEncontrado = await Usuario.findById(req.user._id).select(\r\n  //   \"nombre email direcciones\" // -_id\"\r\n  // );\r\n\r\n  // Estamos utilizando una funcion de agregacion para seleccionar el usuario con sus agendas y ademas evitar mostrar el password pero solamente el usuario cuyo id sea el de req.user\r\n  const usuarioEncontrado = await Usuario.aggregate()\r\n    .lookup({\r\n      from: \"agendas\", // nombre de la tabla de donde voy a hacer el join\r\n      localField: \"agendas\", // nombre de la columna que usare en mi tabla usuario\r\n      foreignField: \"_id\", // nombre de la columna que usare en la tabla agendas\r\n      as: \"agendas\", // alias\r\n    })\r\n    .match({ _id: req.user._id })\r\n    .project(\"-password\");\r\n\r\n  res.json({\r\n    content: usuarioEncontrado,\r\n  });\r\n}"]}
{"version":3,"sources":["productos.controller.js"],"names":["_prisma","require","crearProducto","req","res","data","nuevoProducto","regeneratorRuntime","async","_context","prev","next","body","awrap","Prisma","producto","create","sent","console","log","status","json","message","t0","error","stop","listarProductos","productos","_context2","findMany","abrupt","content","id","params","findUnique","where","Number","_context3","actualizarProducto","_context4","update","nombre","cantidad","precio","disponibilidad","select","eliminarProducto","_context5"],"mappings":"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","file":"productos.controller.min.js","sourcesContent":["import { Prisma } from \"../prisma.js\";\r\n\r\nexport const crearProducto = async (req, res) => {\r\n  const data = req.body; // {nombre: '...', precio: ..., cantidad: ... , disponibilidad: ...}\r\n  try {\r\n    // Todas las operaciones que se realiza en Prisma son operaciones asincronas\r\n    const nuevoProducto = await Prisma.producto.create({\r\n      data, // data: data\r\n      // {\r\n      //   nombre: data.nombre,\r\n      //   precio: data.precio,\r\n      //   cantidad: data.cantidad,\r\n      //   disponibilidad: data.disponibilidad,\r\n      // },\r\n    });\r\n\r\n    console.log(\"hola\");\r\n\r\n    res.status(201).json({\r\n      message: \"producto creado exitosamente\",\r\n      content: nuevoProducto,\r\n    });\r\n  } catch (error) {\r\n    res.status(400).json({\r\n      message: \"Error al crear el producto\",\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const listarProductos = async (req, res) => {\r\n  try {\r\n    const productos = await Prisma.producto.findMany();\r\n    return res.status(200).json({\r\n      message: \"Productos encontrados\",\r\n      content: productos,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({\r\n      message: \"Error en el servidor\",\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const traerProductoPorId = async (req, res) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const producto = await Prisma.producto.findUnique({\r\n      where: {\r\n        id: Number(id),\r\n      },\r\n    });\r\n    if (!producto) {\r\n      return res.status(404).json({\r\n        message: \"Producto no encontrado\",\r\n      });\r\n    }\r\n    return res.status(200).json({\r\n      message: \"Producto encontrado\",\r\n      content: producto,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({\r\n      message: \"Error en el servidor\",\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const actualizarProducto = async (req, res) => {\r\n  const { id } = req.params;\r\n  const data = req.body;\r\n  try {\r\n    const findProduct = await Prisma.producto.findUnique({\r\n      where: {\r\n        id: Number(id),\r\n      },\r\n    });\r\n    if (!findProduct) {\r\n      return res.status(404).json({\r\n        message: \"Producto no encontrado\",\r\n      });\r\n    }\r\n    const producto = await Prisma.producto.update({\r\n      where: {\r\n        id: Number(id),\r\n      },\r\n      data: {\r\n        nombre: data.nombre,\r\n        cantidad: data.cantidad,\r\n        precio: data.precio,\r\n        disponibilidad: data.disponibilidad,\r\n      },\r\n      select: {\r\n        id: true,\r\n        nombre: true,\r\n        cantidad: true,\r\n        precio: true,\r\n      },\r\n    });\r\n\r\n    return res.status(201).json({\r\n      message: \"Producto actualizado\",\r\n      content: producto,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({\r\n      message: \"Error en el servidor\",\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const eliminarProducto = async (req, res) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const findProduct = await Prisma.producto.findUnique({\r\n      where: {\r\n        id: Number(id),\r\n      },\r\n    });\r\n    if (!findProduct) {\r\n      return res.status(404).json({\r\n        message: \"Producto no encontrado\",\r\n      });\r\n    }\r\n\r\n    const producto = await Prisma.producto.update({\r\n      where: {\r\n        id: Number(id),\r\n      },\r\n      data: {\r\n        disponibilidad: false,\r\n      },\r\n      select: {\r\n        id: true,\r\n        nombre: true,\r\n        disponibilidad: true,\r\n      },\r\n    });\r\n    return res.status(200).json({\r\n      message: \"Producto eliminado\",\r\n      content: producto,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({\r\n      message: \"Error en el servidor\",\r\n      error: error.message,\r\n    });\r\n  }\r\n};"]}
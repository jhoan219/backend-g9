{"version":3,"sources":["wachiman.js"],"names":["vigilante","req","res","next","console","log","headers","authorization","status","json","message","token","split","resultado","jsonwebtoken","verify","process","env","JWT_SECRET","Usuario","findById","jti","usuarioEncontrado","Error","user","toJSON","content"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;AACO,SAAeA,SAAf,CAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AACLC,UAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EADK,CAEL;AAEA;AACA;;AALK,cAMAJ,GAAG,CAACK,OAAJ,CAAYC,aANZ;AAAA;AAAA;AAAA;;AAAA,2CAOIL,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,YAAAA,OAAO,EAAE;AADiB,WAArB,CAPJ;;AAAA;AAYCC,UAAAA,KAZD,GAYSV,GAAG,CAACK,OAAJ,CAAYC,aAAZ,CAA0BK,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAZT;AAaLR,UAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AAbK;AAeGE,UAAAA,SAfH,GAeeC,yBAAaC,MAAb,CAAoBJ,KAApB,EAA2BK,OAAO,CAACC,GAAR,CAAYC,UAAvC,CAff;AAgBHd,UAAAA,OAAO,CAACC,GAAR,CAAYQ,SAAZ,EAhBG,CAiBH;;AAjBG;AAAA,0CAkB6BM,sBAAQC,QAAR,CAAiBP,SAAS,CAACQ,GAA3B,CAlB7B;;AAAA;AAkBGC,UAAAA,iBAlBH;;AAAA,cAqBEA,iBArBF;AAAA;AAAA;AAAA;;AAAA,gBAsBK,IAAIC,KAAJ,CAAU,mBAAV,CAtBL;;AAAA;AAyBH;AACAtB,UAAAA,GAAG,CAACuB,IAAJ,GAAWF,iBAAiB,CAACG,MAAlB,EAAX;AAEAtB,UAAAA,IAAI;AA5BD;AAAA;;AAAA;AAAA;AAAA;AAAA,2CA8BID,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,YAAAA,OAAO,EAAE,iBADiB;AAE1BgB,YAAAA,OAAO,EAAE,YAAMhB;AAFW,WAArB,CA9BJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import jsonwebtoken from \"jsonwebtoken\";\r\nimport { Usuario } from \"../models/usuarioModel.js\";\r\n\r\n// Middleware => es un controlador intermedio que se encarga de validar que la operacion se realice correctamente, si algo esta mal o invalido lo detendra y no permitira que pase al siguiente controlador (el siguiente controlador puede ser otro middleware o el controlador final)\r\nexport async function vigilante(req, res, next) {\r\n  console.log(\"Yo soy un middleware\");\r\n  // next > si no le pasamos ningun parametro entonces dejara pasar, caso contrario detendra el ciclo y hasta ahi no mas llegara\r\n\r\n  // Primero verificamos que tengamos una token\r\n  // headers > cabecera de la token es ahi donde se envia el user-agent (host o servidor es), host (host del client) y otros headers que el cliente lo puede setear, aqui tbn se adjunta la autorizacion\r\n  if (!req.headers.authorization) {\r\n    return res.status(401).json({\r\n      message: \"Se necesita una token para esta operacion\",\r\n    });\r\n  }\r\n\r\n  const token = req.headers.authorization.split(\" \")[1];\r\n  console.log(token);\r\n  try {\r\n    const resultado = jsonwebtoken.verify(token, process.env.JWT_SECRET);\r\n    console.log(resultado);\r\n    //buscaremos a ese usuario\r\n    const usuarioEncontrado = await Usuario.findById(resultado.jti);\r\n\r\n    // si no existe el usuario entonces emitimos un error que ingresara al catch\r\n    if (!usuarioEncontrado) {\r\n      throw new Error(\"Usuario no existe\");\r\n    }\r\n\r\n    // agregar ese usuario al req.user para que pueda ser utilizado luego\r\n    req.user = usuarioEncontrado.toJSON();\r\n\r\n    next();\r\n  } catch (error) {\r\n    return res.status(400).json({\r\n      message: \" Token invalida\",\r\n      content: error.message,\r\n    });\r\n  }\r\n}"],"file":"wachiman.dev.js"}